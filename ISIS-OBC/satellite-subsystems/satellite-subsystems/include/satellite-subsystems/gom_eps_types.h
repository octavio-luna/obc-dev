/*
 * gom_eps_types.h
 *
 * AUTOGENERATED CODE
 * Please do not perform manual edits
 * Generated using autogen v0.19.2
 *
 * Generated from: gom_eps.yaml
 */

#ifndef GOM_EPS_TYPES_H_
#define GOM_EPS_TYPES_H_

#include <stddef.h>
#include <stdint.h>

/* DEFINES */

#define GOM_EPS_PING_ID {0x01}
#define GOM_EPS_REBOOT_ID {0x04}
#define GOM_EPS_GET_HK_1_ID {0x08}
#define GOM_EPS_GET_HK_2_ID {0x08}
#define GOM_EPS_GET_HK_2_BASIC_ID {0x08}
#define GOM_EPS_GET_HK_2_OUT_ID {0x08}
#define GOM_EPS_GET_HK_2_VI_ID {0x08}
#define GOM_EPS_GET_HK_2_WDT_ID {0x08}
#define GOM_EPS_SET_OUTPUT_ID {0x09}
#define GOM_EPS_SET_SINGLE_OUTPUT_ID {0x0A}
#define GOM_EPS_SET_PV_VOLT_ID {0x0B}
#define GOM_EPS_SET_PV_AUTO_ID {0x0C}
#define GOM_EPS_SET_HEATER_ID {0x0D}
#define GOM_EPS_RESET_COUNTERS_ID {0x0F}
#define GOM_EPS_RESET_WDT_ID {0x10}
#define GOM_EPS_CONFIG_CMD_ID {0x11}
#define GOM_EPS_CONFIG_GET_ID {0x12}
#define GOM_EPS_CONFIG_SET_ID {0x13}
#define GOM_EPS_HARD_RESET_ID {0x14}
#define GOM_EPS_CONFIG2_CMD_ID {0x15}
#define GOM_EPS_CONFIG2_GET_ID {0x16}
#define GOM_EPS_CONFIG2_SET_ID {0x17}


/* ENUMS */

/*!
 * Generic on/off enum
 */
typedef enum __attribute__ ((__packed__)) gom_eps__mode_t
{
    gom_eps__mode__off = 0u,
    gom_eps__mode__on = 1u,
} gom_eps__mode_t;

/*!
 * Powerpoint tracking mode
 */
typedef enum __attribute__ ((__packed__)) gom_eps__ppt_mode_t
{
    gom_eps__ppt_mode__hardware = 0u,
    gom_eps__ppt_mode__mppt = 1u,
    gom_eps__ppt_mode__fixed_sw_ppt = 2u,
} gom_eps__ppt_mode_t;

/* STRUCTS */

/*!
 *  GOM_EPS instance structure
 */
typedef struct
{
    uint8_t i2cAddr; /*!< I2C address used for this instance */
} GOM_EPS_t;

/*!
 * Union for storing the parameters for struct channel_status.
 */
typedef union __attribute__((__packed__)) _gom_eps__channel_status_t
{
    unsigned char raw[1];
    struct __attribute__ ((__packed__))
    {
        uint8_t quadbatHeater : 1; /*!<  */
        uint8_t quadbatSwitch : 1; /*!<  */
        uint8_t channel3V3_3 : 1; /*!<  */
        uint8_t channel3V3_2 : 1; /*!<  */
        uint8_t channel3V3_1 : 1; /*!<  */
        uint8_t channel5V_3 : 1; /*!<  */
        uint8_t channel5V_2 : 1; /*!<  */
        uint8_t channel5V_1 : 1; /*!<  */
    } fields;
} gom_eps__channel_status_t;

/*!
 * Union for storing the parameters received by config2_get.
 */
typedef union __attribute__((__packed__)) _gom_eps__config2_get__from_t
{
    unsigned char raw[22];
    struct __attribute__ ((__packed__))
    {
        uint8_t cc; /*!< Command code */
        int8_t error; /*!< Reply error */
        uint16_t batt_maxvoltage; /*!<  */
        uint16_t batt_safevoltage; /*!<  */
        uint16_t batt_critcalvoltage; /*!<  */
        uint16_t batt_normalvoltage; /*!<  */
        uint32_t reserved1[2]; /*!<  */
        uint8_t reserved2[4]; /*!<  */
    } fields;
} gom_eps__config2_get__from_t;

/*!
 * Union for storing the parameters sent by config2_set.
 */
typedef union __attribute__((__packed__)) _gom_eps__config2_set__to_t
{
    unsigned char raw[20];
    struct __attribute__ ((__packed__))
    {
        uint16_t batt_maxvoltage; /*!<  */
        uint16_t batt_safevoltage; /*!<  */
        uint16_t batt_critcalvoltage; /*!<  */
        uint16_t batt_normalvoltage; /*!<  */
        uint32_t reserved1[2]; /*!<  */
        uint8_t reserved2[4]; /*!<  */
    } fields;
} gom_eps__config2_set__to_t;

/*!
 * Union for storing the parameters received by config_get.
 */
typedef union __attribute__((__packed__)) _gom_eps__config_get__from_t
{
    unsigned char raw[60];
    struct __attribute__ ((__packed__))
    {
        uint8_t cc; /*!< Command code */
        int8_t error; /*!< Reply error */
        uint8_t ppt_mode; /*!< Mode for PPT [1 = AUTO, 2 = FIXED] */
        uint8_t batt_heater_mode; /*!< Mode for battheater [0 = Manual, 1 = Auto] */
        int8_t batt_heater_low; /*!< Turn heater on at [degC] */
        int8_t batt_heater_high; /*!< Turn heater off at [degC] */
        uint8_t output_normal_value[8]; /*!< Nominal mode output value */
        uint8_t output_safe_value[8]; /*!< Safe mode output value */
        uint16_t output_initial_on_delay[8]; /*!< Output switches: init with these on delays [s] */
        uint16_t output_initial_off_delay[8]; /*!< Output switches: init with these off delays [s] */
        uint16_t vboost[3]; /*!< Fixed PPT point for boost converters [mV] */
    } fields;
} gom_eps__config_get__from_t;

/*!
 * Union for storing the parameters sent by config_set.
 */
typedef union __attribute__((__packed__)) _gom_eps__config_set__to_t
{
    unsigned char raw[58];
    struct __attribute__ ((__packed__))
    {
        uint8_t ppt_mode; /*!< Mode for PPT [1 = AUTO, 2 = FIXED] */
        uint8_t batt_heater_mode; /*!< Mode for battheater [0 = Manual, 1 = Auto] */
        int8_t batt_heater_low; /*!< Turn heater on at [degC] */
        int8_t batt_heater_high; /*!< Turn heater off at [degC] */
        uint8_t output_normal_value[8]; /*!< Nominal mode output value */
        uint8_t output_safe_value[8]; /*!< Safe mode output value */
        uint16_t output_initial_on_delay[8]; /*!< Output switches: init with these on delays [s] */
        uint16_t output_initial_off_delay[8]; /*!< Output switches: init with these off delays [s] */
        uint16_t vboost[3]; /*!< Fixed PPT point for boost converters [mV] */
    } fields;
} gom_eps__config_set__to_t;

/*!
 * Union for storing the parameters received by get_hk_1.
 */
typedef union __attribute__((__packed__)) _gom_eps__get_hk_1__from_t
{
    unsigned char raw[45];
    struct __attribute__ ((__packed__))
    {
        uint8_t cc; /*!< Command code */
        int8_t error; /*!< Reply error */
        uint16_t photoVoltaic3; /*!< Voltage value at photovoltaic 3 [mV] */
        uint16_t photoVoltaic2; /*!< Voltage value at photovoltaic 2 [mV] */
        uint16_t photoVoltaic1; /*!< Voltage value at photovoltaic 1 [mV] */
        uint16_t pc; /*!< Total photo current [mA] */
        uint16_t bv; /*!< Battery voltage [mV] */
        uint16_t sc; /*!< Total system current [mA] */
        int16_t tempConverter[3]; /*!< Temp. of boost converters (1,2,3) [degC] */
        int16_t tempBattery; /*!< Temp. of onboard battery [degC] */
        int16_t batteryBoardTemp[2]; /*!< External board battery temperatures [degC] */
        uint16_t latchUp3v3Channel3; /*!< Latchup Count at 3.3V Channel 3 */
        uint16_t latchUp3v3Channel2; /*!< Latchup Count at 3.3V Channel 2 */
        uint16_t latchUp3v3Channel1; /*!< Latchup Count at 3.3V Channel 1 */
        uint16_t latchUp5vChannel3; /*!< Latchup Count at 5V Channel 3 */
        uint16_t latchUp5vChannel2; /*!< Latchup Count at 5V Channel 2 */
        uint16_t latchUp5vChannel1; /*!< Latchup Count at 5V Channel 1 */
        uint8_t reset; /*!< Cause of last EPS reset */
        uint16_t bootcount; /*!< Number of EPS reboots */
        uint16_t sw_errors; /*!< Number of errors in the eps software */
        gom_eps__ppt_mode_t ppt_mode; /*!< 0 = Hardware, 1 = MPPT, 2 = Fixed SW PPT */
        gom_eps__channel_status_t channel_status; /*!< Mask of output channel status, 1=on, 0=off. MSB - [QH QS 3.3V3 3.3V2 3.3V1 5V3 5V2 5V1] ï¿½ LSB */
    } fields;
} gom_eps__get_hk_1__from_t;

/*!
 * Union for storing the parameters received by get_hk_2.
 */
typedef union __attribute__((__packed__)) _gom_eps__get_hk_2__from_t
{
    unsigned char raw[133];
    struct __attribute__ ((__packed__))
    {
        uint8_t cc; /*!< Command code */
        int8_t error; /*!< Reply error */
        uint16_t vboost[3]; /*!< Voltage of boost converters [mV] [PV1, PV2, PV3] */
        uint16_t vbatt; /*!< Voltage of battery [mV] */
        uint16_t currin[3]; /*!< Current in [mA] */
        uint16_t cursun; /*!< Current from boost converters */
        uint16_t cursys; /*!< Current out of battery */
        uint16_t reserved1; /*!< Reserved for future use */
        uint16_t currout[6]; /*!< Current out [mA] */
        uint8_t output[8]; /*!< Status of outputs */
        uint16_t output_on_delta[8]; /*!< Time till power on for each channel */
        uint16_t output_off_delta[8]; /*!< Time till power off for each channel */
        uint16_t latchup[6]; /*!< Number of latch-ups for each channel */
        uint32_t wdt_i2c_time_left; /*!< Time left on I2C wdt */
        uint32_t wdt_gnd_time_left; /*!< Time left on I2C wdt */
        uint8_t wdt_csp_pings_left[2]; /*!< Pings left on CSP wdt */
        uint32_t counter_wdt_i2c; /*!< Number of WDT I2C reboots */
        uint32_t counter_wdt_gnd; /*!< Number of WDT GND reboots */
        uint32_t counter_wdt_csp[2]; /*!< Number of WDT CSP reboots */
        uint32_t counter_boot; /*!< Number of EPS reboots */
        int16_t temp[6]; /*!< Temperature sensors [0 = TEMP1, TEMP2, TEMP3, TEMP4, BATT0, BATT1] */
        uint8_t bootcause; /*!< Cause of last EPS reset */
        uint8_t battmode; /*!< Mode for battery [0 = normal, 1 = undervoltage, 2 = overvoltage] */
        uint8_t pptmmode; /*!< Mode of PPT tracker */
        uint16_t reserved2; /*!<  */
    } fields;
} gom_eps__get_hk_2__from_t;

/*!
 * Union for storing the parameters received by get_hk_2_basic.
 */
typedef union __attribute__((__packed__)) _gom_eps__get_hk_2_basic__from_t
{
    unsigned char raw[23];
    struct __attribute__ ((__packed__))
    {
        uint8_t cc; /*!< Command code */
        int8_t error; /*!< Reply error */
        uint32_t counter_boot; /*!< Number of EPS reboots */
        int16_t temp[6]; /*!< Temperature sensors [0 = TEMP1, TEMP2, TEMP3, TEMP4, BATT0, BATT1] */
        uint8_t bootcause; /*!< Cause of last EPS reset */
        uint8_t battmode; /*!< Mode for battery [0 = normal, 1 = undervoltage, 2 = overvoltage] */
        uint8_t pptmmode; /*!< Mode of PPT tracker */
        uint16_t reserved2; /*!<  */
    } fields;
} gom_eps__get_hk_2_basic__from_t;

/*!
 * Union for storing the parameters received by get_hk_2_out.
 */
typedef union __attribute__((__packed__)) _gom_eps__get_hk_2_out__from_t
{
    unsigned char raw[66];
    struct __attribute__ ((__packed__))
    {
        uint8_t cc; /*!< Command code */
        int8_t error; /*!< Reply error */
        uint16_t currout[6]; /*!< Current out [mA] */
        uint8_t output[8]; /*!< Status of outputs */
        uint16_t output_on_delta[8]; /*!< Time till power on for each channel */
        uint16_t output_off_delta[8]; /*!< Time till power off for each channel */
        uint16_t latchup[6]; /*!< Number of latch-ups for each channel */
    } fields;
} gom_eps__get_hk_2_out__from_t;

/*!
 * Union for storing the parameters received by get_hk_2_vi.
 */
typedef union __attribute__((__packed__)) _gom_eps__get_hk_2_vi__from_t
{
    unsigned char raw[22];
    struct __attribute__ ((__packed__))
    {
        uint8_t cc; /*!< Command code */
        int8_t error; /*!< Reply error */
        uint16_t vboost[3]; /*!< Voltage of boost converters [mV] [PV1, PV2, PV3] */
        uint16_t vbatt; /*!< Voltage of battery [mV] */
        uint16_t currin[3]; /*!< Current in [mA] */
        uint16_t cursun; /*!< Current from boost converters */
        uint16_t cursys; /*!< Current out of battery */
        uint16_t reserved1; /*!< Reserved for future use */
    } fields;
} gom_eps__get_hk_2_vi__from_t;

/*!
 * Union for storing the parameters received by get_hk_2_wdt.
 */
typedef union __attribute__((__packed__)) _gom_eps__get_hk_2_wdt__from_t
{
    unsigned char raw[28];
    struct __attribute__ ((__packed__))
    {
        uint8_t cc; /*!< Command code */
        int8_t error; /*!< Reply error */
        uint32_t wdt_i2c_time_left; /*!< Time left on I2C wdt */
        uint32_t wdt_gnd_time_left; /*!< Time left on I2C wdt */
        uint8_t wdt_csp_pings_left[2]; /*!< Pings left on CSP wdt */
        uint32_t counter_wdt_i2c; /*!< Number of WDT I2C reboots */
        uint32_t counter_wdt_gnd; /*!< Number of WDT GND reboots */
        uint32_t counter_wdt_csp[2]; /*!< Number of WDT CSP reboots */
    } fields;
} gom_eps__get_hk_2_wdt__from_t;

/*!
 * Union for storing the parameters sent by set_heater.
 */
typedef union __attribute__((__packed__)) _gom_eps__set_heater__to_t
{
    unsigned char raw[3];
    struct __attribute__ ((__packed__))
    {
        uint8_t cmd; /*!< cmd=0 */
        uint8_t heater; /*!< 0=BP4 */
        uint8_t mode; /*!< 0=off */
    } fields;
} gom_eps__set_heater__to_t;

/*!
 * Union for storing the parameters received by set_heater.
 */
typedef union __attribute__((__packed__)) _gom_eps__set_heater__from_t
{
    unsigned char raw[4];
    struct __attribute__ ((__packed__))
    {
        uint8_t cc; /*!< Command code */
        int8_t error; /*!< Reply error */
        gom_eps__mode_t bp4; /*!< Mode: 0 = OFF, 1 = ON */
        gom_eps__mode_t onboard; /*!< Mode: 0 = OFF, 1 = ON */
    } fields;
} gom_eps__set_heater__from_t;

/*!
 * Union for storing the parameters sent by set_pv_volt.
 */
typedef union __attribute__((__packed__)) _gom_eps__set_pv_volt__to_t
{
    unsigned char raw[6];
    struct __attribute__ ((__packed__))
    {
        uint16_t voltage1; /*!< Photo-voltaic 1 input voltage [mV] */
        uint16_t voltage2; /*!< Photo-voltaic 2 input voltage [mV] */
        uint16_t voltage3; /*!< Photo-voltaic 3 input voltage [mV] */
    } fields;
} gom_eps__set_pv_volt__to_t;

/*!
 * Union for storing the parameters sent by set_single_output.
 */
typedef union __attribute__((__packed__)) _gom_eps__set_single_output__to_t
{
    unsigned char raw[4];
    struct __attribute__ ((__packed__))
    {
        uint8_t channel; /*!< Channel to set */
        gom_eps__mode_t value; /*!< Value of channel [0=off, 1=on] */
        int16_t delay; /*!< Delay before setting channel */
    } fields;
} gom_eps__set_single_output__to_t;

#endif /* GOM_EPS_TYPES_H_ */

