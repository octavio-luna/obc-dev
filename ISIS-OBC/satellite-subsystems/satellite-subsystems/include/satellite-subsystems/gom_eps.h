/*
 * gom_eps.h
 *
 * AUTOGENERATED CODE
 * Please do not perform manual edits
 * Generated using autogen v0.17.0
 *
 * Generated from: gom_eps.yaml
 */

#ifndef GOM_EPS_H_
#define GOM_EPS_H_

#include "gom_eps_types.h"
#include <satellite-subsystems/common_types.h>

/*!
 *	Initialize driver for a number of GOM_EPS instances. The first instance can then be referenced by using index 0, the second by using index 1, etc.
 *
 *	@param[in] gom_eps Pointer to array of GOM_EPS instances
 *	@param[in] gom_epsCount Number of GOM_EPS instances pointed to by gom_eps input parameter
 * 	@return Error code as specified in common_types.h
 */
driver_error_t GOM_EPS_Init(const GOM_EPS_t* gom_eps, uint8_t gom_epsCount);

/*!
 * Use this command to control the config 2 system
 *
 * @param[in] index Index of GOM_EPS in list provided during driver initialization
 * @param[in] cmd_in 1=restore default config
 * @return Error code as specified in common_types.h
 */
driver_error_t gom_eps__config2_cmd(uint8_t index, uint8_t cmd_in);

/*!
 * Use this command to request the P31 config 2
 *
 * @param[in] index Index of GOM_EPS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t gom_eps__config2_get(uint8_t index, gom_eps__config2_get__from_t *response);

/*!
 * Use this command to set the P31 config 2
 *
 * @param[in] index Index of GOM_EPS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t gom_eps__config2_set(uint8_t index, const gom_eps__config2_set__to_t *params);

/*!
 * Use this command to control the config system
 *
 * @param[in] index Index of GOM_EPS in list provided during driver initialization
 * @param[in] cmd_in 1=restore default config
 * @return Error code as specified in common_types.h
 */
driver_error_t gom_eps__config_cmd(uint8_t index, uint8_t cmd_in);

/*!
 * Use this command to request the P31 config
 *
 * @param[in] index Index of GOM_EPS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t gom_eps__config_get(uint8_t index, gom_eps__config_get__from_t *response);

/*!
 * Use this command to set the P31 config
 *
 * @param[in] index Index of GOM_EPS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t gom_eps__config_set(uint8_t index, const gom_eps__config_set__to_t *params);

/*!
 * Get housekeeping v1 (P31u-6 Struct)
 *
 * @param[in] index Index of GOM_EPS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t gom_eps__get_hk_1(uint8_t index, gom_eps__get_hk_1__from_t *response);

/*!
 * Get housekeeping v2 (P31u-8 / P31u-9 Struct)
 *
 * @param[in] index Index of GOM_EPS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t gom_eps__get_hk_2(uint8_t index, gom_eps__get_hk_2__from_t *response);

/*!
 * Get basic data subset of housekeeping v2
 *
 * @param[in] index Index of GOM_EPS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t gom_eps__get_hk_2_basic(uint8_t index, gom_eps__get_hk_2_basic__from_t *response);

/*!
 * Get output switch data subset of housekeeping v2
 *
 * @param[in] index Index of GOM_EPS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t gom_eps__get_hk_2_out(uint8_t index, gom_eps__get_hk_2_out__from_t *response);

/*!
 * Get voltage and current subset of housekeeping v2
 *
 * @param[in] index Index of GOM_EPS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t gom_eps__get_hk_2_vi(uint8_t index, gom_eps__get_hk_2_vi__from_t *response);

/*!
 * Get watchdog data subset of housekeeping v2
 *
 * @param[in] index Index of GOM_EPS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t gom_eps__get_hk_2_wdt(uint8_t index, gom_eps__get_hk_2_wdt__from_t *response);

/*!
 * Send this command to perform a hard reset of the P31, including cycling permanent 5V and 3.3V and battery outputs.
 *
 * @param[in] index Index of GOM_EPS in list provided during driver initialization
 * @return Error code as specified in common_types.h
 */
driver_error_t gom_eps__hard_reset(uint8_t index);

/*!
 * Ping EPS
 *
 * @param[in] index Index of GOM_EPS in list provided during driver initialization
 * @param[in] value_in One byte ping value. Any value can be used
 * @param[out] value_out The P31 replies with the same value as in the ping request
 * @return Error code as specified in common_types.h
 */
driver_error_t gom_eps__ping(uint8_t index, uint8_t value_in, uint8_t *value_out);

/*!
 * Reboot EPS
 *
 * @param[in] index Index of GOM_EPS in list provided during driver initialization
 * @return Error code as specified in common_types.h
 */
driver_error_t gom_eps__reboot(uint8_t index);

/*!
 * Send this command to reset boot counter and WDT counters
 *
 * @param[in] index Index of GOM_EPS in list provided during driver initialization
 * @return Error code as specified in common_types.h
 */
driver_error_t gom_eps__reset_counters(uint8_t index);

/*!
 * Send this command to reset (kick) dedicated WDT.
 *
 * @param[in] index Index of GOM_EPS in list provided during driver initialization
 * @return Error code as specified in common_types.h
 */
driver_error_t gom_eps__reset_wdt(uint8_t index);

/*!
 * Set header mode
 *
 * @param[in] index Index of GOM_EPS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t gom_eps__set_heater(uint8_t index, const gom_eps__set_heater__to_t *params, gom_eps__set_heater__from_t *response);

/*!
 * Set output switch states.
 *
 * @param[in] index Index of GOM_EPS in list provided during driver initialization
 * @param[in] output_byte_in "Set output switch states by a bitmask where ""1"" means the channel is switched on and ""0"" means it is switched off. LSB is channel 1, next bit is channel 2 etc. (BP4 switch and heater cannot be controlled through this command) [NC NC 3.3V3 3.3V2 3.3V1 5V3 5V2 5V1]"
 * @return Error code as specified in common_types.h
 */
driver_error_t gom_eps__set_output(uint8_t index, uint8_t output_byte_in);

/*!
 * Sets the solar cell power tracking mode
 *
 * @param[in] index Index of GOM_EPS in list provided during driver initialization
 * @param[in] mode_in Sets the solar cell power tracking mode [0=Hardware default power point
 * @return Error code as specified in common_types.h
 */
driver_error_t gom_eps__set_pv_auto(uint8_t index, uint8_t mode_in);

/*!
 * Set the voltage on the photovoltaic inputs V1,V2,V3 in mv
 *
 * @param[in] index Index of GOM_EPS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t gom_eps__set_pv_volt(uint8_t index, const gom_eps__set_pv_volt__to_t *params);

/*!
 * Set single channel output
 *
 * @param[in] index Index of GOM_EPS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t gom_eps__set_single_output(uint8_t index, const gom_eps__set_single_output__to_t *params);

#endif /* GOM_EPS_H_ */

